name: Deploy to AWS ECS

on:
  push:
    branches: [ main, master ]

env:
  AWS_REGION: ${{ secrets.AWS_REGION }}
  ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY_URI }}
  ECS_SERVICE: ${{ secrets.ECS_SERVICE_NAME }}
  ECS_CLUSTER: ${{ secrets.ECS_CLUSTER_NAME }}

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.13'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Run tests with coverage
      run: |
        python -m pytest tests/ --cov=. --cov-report=xml --cov-fail-under=80
        echo "✅ Tests passed with 80%+ coverage"

  deploy:
    name: Build and Deploy to AWS
    runs-on: ubuntu-latest
    needs: test  # Only run if tests pass
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Build Docker image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Build Docker image
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:latest .

    - name: Push image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Push Docker image to ECR
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest

    - name: Deploy to Amazon ECS
      run: |
        # Force new deployment in ECS
        aws ecs update-service --cluster $ECS_CLUSTER --service $ECS_SERVICE --force-new-deployment
        
        # Wait for deployment to complete
        echo "Waiting for ECS service to become stable..."
        aws ecs wait services-stable --cluster $ECS_CLUSTER --services $ECS_SERVICE
        
        # Verify deployment
        echo "✅ Deployment completed successfully!"
        aws ecs describe-services --cluster $ECS_CLUSTER --services $ECS_SERVICE \
          --query 'services[0].{Status:status,RunningCount:runningCount,DesiredCount:desiredCount}'
